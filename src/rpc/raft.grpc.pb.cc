// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raft.proto

#include "raft.pb.h"
#include "raft.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace raftcpp {

static const char* raftrpc_method_names[] = {
  "/raftcpp.raftrpc/HandleRequestPreVote",
  "/raftcpp.raftrpc/HandleRequestVote",
  "/raftcpp.raftrpc/HandleRequestHeartbeat",
  "/raftcpp.raftrpc/HandleRequestPushLogs",
};

std::unique_ptr< raftrpc::Stub> raftrpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< raftrpc::Stub> stub(new raftrpc::Stub(channel, options));
  return stub;
}

raftrpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_HandleRequestPreVote_(raftrpc_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleRequestVote_(raftrpc_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleRequestHeartbeat_(raftrpc_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleRequestPushLogs_(raftrpc_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status raftrpc::Stub::HandleRequestPreVote(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest& request, ::raftcpp::PreVoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::raftcpp::PreVoteRequest, ::raftcpp::PreVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandleRequestPreVote_, context, request, response);
}

void raftrpc::Stub::async::HandleRequestPreVote(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest* request, ::raftcpp::PreVoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::raftcpp::PreVoteRequest, ::raftcpp::PreVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleRequestPreVote_, context, request, response, std::move(f));
}

void raftrpc::Stub::async::HandleRequestPreVote(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest* request, ::raftcpp::PreVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleRequestPreVote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::PreVoteResponse>* raftrpc::Stub::PrepareAsyncHandleRequestPreVoteRaw(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::raftcpp::PreVoteResponse, ::raftcpp::PreVoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandleRequestPreVote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::PreVoteResponse>* raftrpc::Stub::AsyncHandleRequestPreVoteRaw(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandleRequestPreVoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status raftrpc::Stub::HandleRequestVote(::grpc::ClientContext* context, const ::raftcpp::VoteRequest& request, ::raftcpp::VoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::raftcpp::VoteRequest, ::raftcpp::VoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandleRequestVote_, context, request, response);
}

void raftrpc::Stub::async::HandleRequestVote(::grpc::ClientContext* context, const ::raftcpp::VoteRequest* request, ::raftcpp::VoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::raftcpp::VoteRequest, ::raftcpp::VoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleRequestVote_, context, request, response, std::move(f));
}

void raftrpc::Stub::async::HandleRequestVote(::grpc::ClientContext* context, const ::raftcpp::VoteRequest* request, ::raftcpp::VoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleRequestVote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::VoteResponse>* raftrpc::Stub::PrepareAsyncHandleRequestVoteRaw(::grpc::ClientContext* context, const ::raftcpp::VoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::raftcpp::VoteResponse, ::raftcpp::VoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandleRequestVote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::VoteResponse>* raftrpc::Stub::AsyncHandleRequestVoteRaw(::grpc::ClientContext* context, const ::raftcpp::VoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandleRequestVoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status raftrpc::Stub::HandleRequestHeartbeat(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest& request, ::raftcpp::HeartbeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::raftcpp::HeartbeatRequest, ::raftcpp::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandleRequestHeartbeat_, context, request, response);
}

void raftrpc::Stub::async::HandleRequestHeartbeat(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest* request, ::raftcpp::HeartbeatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::raftcpp::HeartbeatRequest, ::raftcpp::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleRequestHeartbeat_, context, request, response, std::move(f));
}

void raftrpc::Stub::async::HandleRequestHeartbeat(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest* request, ::raftcpp::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleRequestHeartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::HeartbeatResponse>* raftrpc::Stub::PrepareAsyncHandleRequestHeartbeatRaw(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::raftcpp::HeartbeatResponse, ::raftcpp::HeartbeatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandleRequestHeartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::HeartbeatResponse>* raftrpc::Stub::AsyncHandleRequestHeartbeatRaw(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandleRequestHeartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status raftrpc::Stub::HandleRequestPushLogs(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest& request, ::raftcpp::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::raftcpp::PushLogsRequest, ::raftcpp::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandleRequestPushLogs_, context, request, response);
}

void raftrpc::Stub::async::HandleRequestPushLogs(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest* request, ::raftcpp::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::raftcpp::PushLogsRequest, ::raftcpp::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleRequestPushLogs_, context, request, response, std::move(f));
}

void raftrpc::Stub::async::HandleRequestPushLogs(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest* request, ::raftcpp::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleRequestPushLogs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::Empty>* raftrpc::Stub::PrepareAsyncHandleRequestPushLogsRaw(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::raftcpp::Empty, ::raftcpp::PushLogsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandleRequestPushLogs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::Empty>* raftrpc::Stub::AsyncHandleRequestPushLogsRaw(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandleRequestPushLogsRaw(context, request, cq);
  result->StartCall();
  return result;
}

raftrpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      raftrpc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< raftrpc::Service, ::raftcpp::PreVoteRequest, ::raftcpp::PreVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](raftrpc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::raftcpp::PreVoteRequest* req,
             ::raftcpp::PreVoteResponse* resp) {
               return service->HandleRequestPreVote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      raftrpc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< raftrpc::Service, ::raftcpp::VoteRequest, ::raftcpp::VoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](raftrpc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::raftcpp::VoteRequest* req,
             ::raftcpp::VoteResponse* resp) {
               return service->HandleRequestVote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      raftrpc_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< raftrpc::Service, ::raftcpp::HeartbeatRequest, ::raftcpp::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](raftrpc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::raftcpp::HeartbeatRequest* req,
             ::raftcpp::HeartbeatResponse* resp) {
               return service->HandleRequestHeartbeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      raftrpc_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< raftrpc::Service, ::raftcpp::PushLogsRequest, ::raftcpp::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](raftrpc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::raftcpp::PushLogsRequest* req,
             ::raftcpp::Empty* resp) {
               return service->HandleRequestPushLogs(ctx, req, resp);
             }, this)));
}

raftrpc::Service::~Service() {
}

::grpc::Status raftrpc::Service::HandleRequestPreVote(::grpc::ServerContext* context, const ::raftcpp::PreVoteRequest* request, ::raftcpp::PreVoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status raftrpc::Service::HandleRequestVote(::grpc::ServerContext* context, const ::raftcpp::VoteRequest* request, ::raftcpp::VoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status raftrpc::Service::HandleRequestHeartbeat(::grpc::ServerContext* context, const ::raftcpp::HeartbeatRequest* request, ::raftcpp::HeartbeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status raftrpc::Service::HandleRequestPushLogs(::grpc::ServerContext* context, const ::raftcpp::PushLogsRequest* request, ::raftcpp::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace raftcpp

