// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raft.proto
#ifndef GRPC_raft_2eproto__INCLUDED
#define GRPC_raft_2eproto__INCLUDED

#include "raft.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace raftcpp {

// import "google/protobuf/empty.proto";
//
class raftrpc final {
 public:
  static constexpr char const* service_full_name() {
    return "raftcpp.raftrpc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status HandleRequestPreVote(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest& request, ::raftcpp::PreVoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::PreVoteResponse>> AsyncHandleRequestPreVote(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::PreVoteResponse>>(AsyncHandleRequestPreVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::PreVoteResponse>> PrepareAsyncHandleRequestPreVote(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::PreVoteResponse>>(PrepareAsyncHandleRequestPreVoteRaw(context, request, cq));
    }
    virtual ::grpc::Status HandleRequestVote(::grpc::ClientContext* context, const ::raftcpp::VoteRequest& request, ::raftcpp::VoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::VoteResponse>> AsyncHandleRequestVote(::grpc::ClientContext* context, const ::raftcpp::VoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::VoteResponse>>(AsyncHandleRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::VoteResponse>> PrepareAsyncHandleRequestVote(::grpc::ClientContext* context, const ::raftcpp::VoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::VoteResponse>>(PrepareAsyncHandleRequestVoteRaw(context, request, cq));
    }
    virtual ::grpc::Status HandleRequestHeartbeat(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest& request, ::raftcpp::HeartbeatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::HeartbeatResponse>> AsyncHandleRequestHeartbeat(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::HeartbeatResponse>>(AsyncHandleRequestHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::HeartbeatResponse>> PrepareAsyncHandleRequestHeartbeat(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::HeartbeatResponse>>(PrepareAsyncHandleRequestHeartbeatRaw(context, request, cq));
    }
    virtual ::grpc::Status HandleRequestPushLogs(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest& request, ::raftcpp::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::Empty>> AsyncHandleRequestPushLogs(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::Empty>>(AsyncHandleRequestPushLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::Empty>> PrepareAsyncHandleRequestPushLogs(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::Empty>>(PrepareAsyncHandleRequestPushLogsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void HandleRequestPreVote(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest* request, ::raftcpp::PreVoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleRequestPreVote(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest* request, ::raftcpp::PreVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HandleRequestVote(::grpc::ClientContext* context, const ::raftcpp::VoteRequest* request, ::raftcpp::VoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleRequestVote(::grpc::ClientContext* context, const ::raftcpp::VoteRequest* request, ::raftcpp::VoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HandleRequestHeartbeat(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest* request, ::raftcpp::HeartbeatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleRequestHeartbeat(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest* request, ::raftcpp::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HandleRequestPushLogs(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest* request, ::raftcpp::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleRequestPushLogs(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest* request, ::raftcpp::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::PreVoteResponse>* AsyncHandleRequestPreVoteRaw(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::PreVoteResponse>* PrepareAsyncHandleRequestPreVoteRaw(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::VoteResponse>* AsyncHandleRequestVoteRaw(::grpc::ClientContext* context, const ::raftcpp::VoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::VoteResponse>* PrepareAsyncHandleRequestVoteRaw(::grpc::ClientContext* context, const ::raftcpp::VoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::HeartbeatResponse>* AsyncHandleRequestHeartbeatRaw(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::HeartbeatResponse>* PrepareAsyncHandleRequestHeartbeatRaw(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::Empty>* AsyncHandleRequestPushLogsRaw(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftcpp::Empty>* PrepareAsyncHandleRequestPushLogsRaw(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status HandleRequestPreVote(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest& request, ::raftcpp::PreVoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::PreVoteResponse>> AsyncHandleRequestPreVote(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::PreVoteResponse>>(AsyncHandleRequestPreVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::PreVoteResponse>> PrepareAsyncHandleRequestPreVote(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::PreVoteResponse>>(PrepareAsyncHandleRequestPreVoteRaw(context, request, cq));
    }
    ::grpc::Status HandleRequestVote(::grpc::ClientContext* context, const ::raftcpp::VoteRequest& request, ::raftcpp::VoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::VoteResponse>> AsyncHandleRequestVote(::grpc::ClientContext* context, const ::raftcpp::VoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::VoteResponse>>(AsyncHandleRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::VoteResponse>> PrepareAsyncHandleRequestVote(::grpc::ClientContext* context, const ::raftcpp::VoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::VoteResponse>>(PrepareAsyncHandleRequestVoteRaw(context, request, cq));
    }
    ::grpc::Status HandleRequestHeartbeat(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest& request, ::raftcpp::HeartbeatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::HeartbeatResponse>> AsyncHandleRequestHeartbeat(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::HeartbeatResponse>>(AsyncHandleRequestHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::HeartbeatResponse>> PrepareAsyncHandleRequestHeartbeat(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::HeartbeatResponse>>(PrepareAsyncHandleRequestHeartbeatRaw(context, request, cq));
    }
    ::grpc::Status HandleRequestPushLogs(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest& request, ::raftcpp::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::Empty>> AsyncHandleRequestPushLogs(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::Empty>>(AsyncHandleRequestPushLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::Empty>> PrepareAsyncHandleRequestPushLogs(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftcpp::Empty>>(PrepareAsyncHandleRequestPushLogsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void HandleRequestPreVote(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest* request, ::raftcpp::PreVoteResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleRequestPreVote(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest* request, ::raftcpp::PreVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HandleRequestVote(::grpc::ClientContext* context, const ::raftcpp::VoteRequest* request, ::raftcpp::VoteResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleRequestVote(::grpc::ClientContext* context, const ::raftcpp::VoteRequest* request, ::raftcpp::VoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HandleRequestHeartbeat(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest* request, ::raftcpp::HeartbeatResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleRequestHeartbeat(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest* request, ::raftcpp::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HandleRequestPushLogs(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest* request, ::raftcpp::Empty* response, std::function<void(::grpc::Status)>) override;
      void HandleRequestPushLogs(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest* request, ::raftcpp::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::raftcpp::PreVoteResponse>* AsyncHandleRequestPreVoteRaw(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftcpp::PreVoteResponse>* PrepareAsyncHandleRequestPreVoteRaw(::grpc::ClientContext* context, const ::raftcpp::PreVoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftcpp::VoteResponse>* AsyncHandleRequestVoteRaw(::grpc::ClientContext* context, const ::raftcpp::VoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftcpp::VoteResponse>* PrepareAsyncHandleRequestVoteRaw(::grpc::ClientContext* context, const ::raftcpp::VoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftcpp::HeartbeatResponse>* AsyncHandleRequestHeartbeatRaw(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftcpp::HeartbeatResponse>* PrepareAsyncHandleRequestHeartbeatRaw(::grpc::ClientContext* context, const ::raftcpp::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftcpp::Empty>* AsyncHandleRequestPushLogsRaw(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftcpp::Empty>* PrepareAsyncHandleRequestPushLogsRaw(::grpc::ClientContext* context, const ::raftcpp::PushLogsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_HandleRequestPreVote_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleRequestVote_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleRequestHeartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleRequestPushLogs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status HandleRequestPreVote(::grpc::ServerContext* context, const ::raftcpp::PreVoteRequest* request, ::raftcpp::PreVoteResponse* response);
    virtual ::grpc::Status HandleRequestVote(::grpc::ServerContext* context, const ::raftcpp::VoteRequest* request, ::raftcpp::VoteResponse* response);
    virtual ::grpc::Status HandleRequestHeartbeat(::grpc::ServerContext* context, const ::raftcpp::HeartbeatRequest* request, ::raftcpp::HeartbeatResponse* response);
    virtual ::grpc::Status HandleRequestPushLogs(::grpc::ServerContext* context, const ::raftcpp::PushLogsRequest* request, ::raftcpp::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleRequestPreVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleRequestPreVote() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_HandleRequestPreVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestPreVote(::grpc::ServerContext* /*context*/, const ::raftcpp::PreVoteRequest* /*request*/, ::raftcpp::PreVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleRequestPreVote(::grpc::ServerContext* context, ::raftcpp::PreVoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::raftcpp::PreVoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleRequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleRequestVote() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_HandleRequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestVote(::grpc::ServerContext* /*context*/, const ::raftcpp::VoteRequest* /*request*/, ::raftcpp::VoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleRequestVote(::grpc::ServerContext* context, ::raftcpp::VoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::raftcpp::VoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleRequestHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleRequestHeartbeat() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_HandleRequestHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestHeartbeat(::grpc::ServerContext* /*context*/, const ::raftcpp::HeartbeatRequest* /*request*/, ::raftcpp::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleRequestHeartbeat(::grpc::ServerContext* context, ::raftcpp::HeartbeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::raftcpp::HeartbeatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleRequestPushLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleRequestPushLogs() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_HandleRequestPushLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestPushLogs(::grpc::ServerContext* /*context*/, const ::raftcpp::PushLogsRequest* /*request*/, ::raftcpp::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleRequestPushLogs(::grpc::ServerContext* context, ::raftcpp::PushLogsRequest* request, ::grpc::ServerAsyncResponseWriter< ::raftcpp::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_HandleRequestPreVote<WithAsyncMethod_HandleRequestVote<WithAsyncMethod_HandleRequestHeartbeat<WithAsyncMethod_HandleRequestPushLogs<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_HandleRequestPreVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleRequestPreVote() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::raftcpp::PreVoteRequest, ::raftcpp::PreVoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::raftcpp::PreVoteRequest* request, ::raftcpp::PreVoteResponse* response) { return this->HandleRequestPreVote(context, request, response); }));}
    void SetMessageAllocatorFor_HandleRequestPreVote(
        ::grpc::MessageAllocator< ::raftcpp::PreVoteRequest, ::raftcpp::PreVoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::raftcpp::PreVoteRequest, ::raftcpp::PreVoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandleRequestPreVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestPreVote(::grpc::ServerContext* /*context*/, const ::raftcpp::PreVoteRequest* /*request*/, ::raftcpp::PreVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleRequestPreVote(
      ::grpc::CallbackServerContext* /*context*/, const ::raftcpp::PreVoteRequest* /*request*/, ::raftcpp::PreVoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HandleRequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleRequestVote() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::raftcpp::VoteRequest, ::raftcpp::VoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::raftcpp::VoteRequest* request, ::raftcpp::VoteResponse* response) { return this->HandleRequestVote(context, request, response); }));}
    void SetMessageAllocatorFor_HandleRequestVote(
        ::grpc::MessageAllocator< ::raftcpp::VoteRequest, ::raftcpp::VoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::raftcpp::VoteRequest, ::raftcpp::VoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandleRequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestVote(::grpc::ServerContext* /*context*/, const ::raftcpp::VoteRequest* /*request*/, ::raftcpp::VoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleRequestVote(
      ::grpc::CallbackServerContext* /*context*/, const ::raftcpp::VoteRequest* /*request*/, ::raftcpp::VoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HandleRequestHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleRequestHeartbeat() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::raftcpp::HeartbeatRequest, ::raftcpp::HeartbeatResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::raftcpp::HeartbeatRequest* request, ::raftcpp::HeartbeatResponse* response) { return this->HandleRequestHeartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_HandleRequestHeartbeat(
        ::grpc::MessageAllocator< ::raftcpp::HeartbeatRequest, ::raftcpp::HeartbeatResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::raftcpp::HeartbeatRequest, ::raftcpp::HeartbeatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandleRequestHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestHeartbeat(::grpc::ServerContext* /*context*/, const ::raftcpp::HeartbeatRequest* /*request*/, ::raftcpp::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleRequestHeartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::raftcpp::HeartbeatRequest* /*request*/, ::raftcpp::HeartbeatResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HandleRequestPushLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleRequestPushLogs() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::raftcpp::PushLogsRequest, ::raftcpp::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::raftcpp::PushLogsRequest* request, ::raftcpp::Empty* response) { return this->HandleRequestPushLogs(context, request, response); }));}
    void SetMessageAllocatorFor_HandleRequestPushLogs(
        ::grpc::MessageAllocator< ::raftcpp::PushLogsRequest, ::raftcpp::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::raftcpp::PushLogsRequest, ::raftcpp::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandleRequestPushLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestPushLogs(::grpc::ServerContext* /*context*/, const ::raftcpp::PushLogsRequest* /*request*/, ::raftcpp::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleRequestPushLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::raftcpp::PushLogsRequest* /*request*/, ::raftcpp::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_HandleRequestPreVote<WithCallbackMethod_HandleRequestVote<WithCallbackMethod_HandleRequestHeartbeat<WithCallbackMethod_HandleRequestPushLogs<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_HandleRequestPreVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleRequestPreVote() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_HandleRequestPreVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestPreVote(::grpc::ServerContext* /*context*/, const ::raftcpp::PreVoteRequest* /*request*/, ::raftcpp::PreVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleRequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleRequestVote() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_HandleRequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestVote(::grpc::ServerContext* /*context*/, const ::raftcpp::VoteRequest* /*request*/, ::raftcpp::VoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleRequestHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleRequestHeartbeat() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_HandleRequestHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestHeartbeat(::grpc::ServerContext* /*context*/, const ::raftcpp::HeartbeatRequest* /*request*/, ::raftcpp::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleRequestPushLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleRequestPushLogs() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_HandleRequestPushLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestPushLogs(::grpc::ServerContext* /*context*/, const ::raftcpp::PushLogsRequest* /*request*/, ::raftcpp::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleRequestPreVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleRequestPreVote() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_HandleRequestPreVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestPreVote(::grpc::ServerContext* /*context*/, const ::raftcpp::PreVoteRequest* /*request*/, ::raftcpp::PreVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleRequestPreVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleRequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleRequestVote() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_HandleRequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestVote(::grpc::ServerContext* /*context*/, const ::raftcpp::VoteRequest* /*request*/, ::raftcpp::VoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleRequestVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleRequestHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleRequestHeartbeat() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_HandleRequestHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestHeartbeat(::grpc::ServerContext* /*context*/, const ::raftcpp::HeartbeatRequest* /*request*/, ::raftcpp::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleRequestHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleRequestPushLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleRequestPushLogs() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_HandleRequestPushLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestPushLogs(::grpc::ServerContext* /*context*/, const ::raftcpp::PushLogsRequest* /*request*/, ::raftcpp::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleRequestPushLogs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleRequestPreVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleRequestPreVote() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleRequestPreVote(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandleRequestPreVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestPreVote(::grpc::ServerContext* /*context*/, const ::raftcpp::PreVoteRequest* /*request*/, ::raftcpp::PreVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleRequestPreVote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleRequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleRequestVote() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleRequestVote(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandleRequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestVote(::grpc::ServerContext* /*context*/, const ::raftcpp::VoteRequest* /*request*/, ::raftcpp::VoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleRequestVote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleRequestHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleRequestHeartbeat() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleRequestHeartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandleRequestHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestHeartbeat(::grpc::ServerContext* /*context*/, const ::raftcpp::HeartbeatRequest* /*request*/, ::raftcpp::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleRequestHeartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleRequestPushLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleRequestPushLogs() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleRequestPushLogs(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandleRequestPushLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequestPushLogs(::grpc::ServerContext* /*context*/, const ::raftcpp::PushLogsRequest* /*request*/, ::raftcpp::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleRequestPushLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleRequestPreVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleRequestPreVote() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::raftcpp::PreVoteRequest, ::raftcpp::PreVoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::raftcpp::PreVoteRequest, ::raftcpp::PreVoteResponse>* streamer) {
                       return this->StreamedHandleRequestPreVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleRequestPreVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleRequestPreVote(::grpc::ServerContext* /*context*/, const ::raftcpp::PreVoteRequest* /*request*/, ::raftcpp::PreVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleRequestPreVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raftcpp::PreVoteRequest,::raftcpp::PreVoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleRequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleRequestVote() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::raftcpp::VoteRequest, ::raftcpp::VoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::raftcpp::VoteRequest, ::raftcpp::VoteResponse>* streamer) {
                       return this->StreamedHandleRequestVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleRequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleRequestVote(::grpc::ServerContext* /*context*/, const ::raftcpp::VoteRequest* /*request*/, ::raftcpp::VoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleRequestVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raftcpp::VoteRequest,::raftcpp::VoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleRequestHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleRequestHeartbeat() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::raftcpp::HeartbeatRequest, ::raftcpp::HeartbeatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::raftcpp::HeartbeatRequest, ::raftcpp::HeartbeatResponse>* streamer) {
                       return this->StreamedHandleRequestHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleRequestHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleRequestHeartbeat(::grpc::ServerContext* /*context*/, const ::raftcpp::HeartbeatRequest* /*request*/, ::raftcpp::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleRequestHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raftcpp::HeartbeatRequest,::raftcpp::HeartbeatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleRequestPushLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleRequestPushLogs() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::raftcpp::PushLogsRequest, ::raftcpp::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::raftcpp::PushLogsRequest, ::raftcpp::Empty>* streamer) {
                       return this->StreamedHandleRequestPushLogs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleRequestPushLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleRequestPushLogs(::grpc::ServerContext* /*context*/, const ::raftcpp::PushLogsRequest* /*request*/, ::raftcpp::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleRequestPushLogs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raftcpp::PushLogsRequest,::raftcpp::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_HandleRequestPreVote<WithStreamedUnaryMethod_HandleRequestVote<WithStreamedUnaryMethod_HandleRequestHeartbeat<WithStreamedUnaryMethod_HandleRequestPushLogs<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_HandleRequestPreVote<WithStreamedUnaryMethod_HandleRequestVote<WithStreamedUnaryMethod_HandleRequestHeartbeat<WithStreamedUnaryMethod_HandleRequestPushLogs<Service > > > > StreamedService;
};

}  // namespace raftcpp


#endif  // GRPC_raft_2eproto__INCLUDED
